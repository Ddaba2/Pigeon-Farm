const { executeQuery } = require('./config/database.js');

/**
 * Script de nettoyage de la base de donn√©es
 * 
 * Ce script supprime toutes les donn√©es de test tout en pr√©servant :
 * - Les utilisateurs admin essentiels
 * - La structure de la base de donn√©es
 */

async function cleanDatabase() {
  console.log('üßπ D√©but du nettoyage de la base de donn√©es...\n');

  try {
    // D√©sactiver temporairement les contraintes de cl√©s √©trang√®res
    await executeQuery('SET FOREIGN_KEY_CHECKS = 0');
    console.log('‚úÖ Contraintes de cl√©s √©trang√®res d√©sactiv√©es\n');

    // Tables √† nettoyer
    const tablesToClean = [
      'couples',
      'eggs',
      'pigeonneaux',
      'healthRecords',
      'sales',
      'notifications',
      'audit_logs',
      'password_reset_codes',
      'sessions',
      'user_preferences'
    ];

    // Compter les enregistrements avant suppression
    console.log('üìä Comptage des enregistrements avant suppression...\n');
    for (const table of tablesToClean) {
      try {
        const [countResult] = await executeQuery(`SELECT COUNT(*) as count FROM ${table}`);
        const count = countResult.count;
        console.log(`   ${table}: ${count} enregistrements`);
      } catch (error) {
        console.log(`   ${table}: Table non trouv√©e ou erreur`);
      }
    }

    console.log('\nüóëÔ∏è  Suppression des donn√©es...\n');

    // Supprimer les donn√©es dans l'ordre appropri√© (en respectant les d√©pendances)
    for (const table of tablesToClean) {
      try {
        const result = await executeQuery(`DELETE FROM ${table}`);
        console.log(`‚úÖ ${table}: ${result.affectedRows} enregistrements supprim√©s`);
      } catch (error) {
        console.log(`‚ö†Ô∏è  ${table}: ${error.message}`);
      }
    }

    // Supprimer les utilisateurs non-admin
    console.log('\nüë• Nettoyage des utilisateurs...\n');
    try {
      const result = await executeQuery(`DELETE FROM users WHERE role != 'admin'`);
      console.log(`‚úÖ Utilisateurs non-admin: ${result.affectedRows} supprim√©s`);
    } catch (error) {
      console.log(`‚ö†Ô∏è  Erreur lors de la suppression des utilisateurs: ${error.message}`);
    }

    // R√©initialiser les compteurs AUTO_INCREMENT
    console.log('\nüîÑ R√©initialisation des compteurs AUTO_INCREMENT...\n');
    const tablesWithAutoIncrement = [
      'couples',
      'eggs',
      'pigeonneaux',
      'healthRecords',
      'sales',
      'notifications',
      'audit_logs',
      'password_reset_codes',
      'sessions',
      'user_preferences',
      'users'
    ];

    for (const table of tablesWithAutoIncrement) {
      try {
        await executeQuery(`ALTER TABLE ${table} AUTO_INCREMENT = 1`);
        console.log(`‚úÖ ${table}: Compteur r√©initialis√©`);
      } catch (error) {
        console.log(`‚ö†Ô∏è  ${table}: ${error.message}`);
      }
    }

    // R√©activer les contraintes de cl√©s √©trang√®res
    await executeQuery('SET FOREIGN_KEY_CHECKS = 1');
    console.log('\n‚úÖ Contraintes de cl√©s √©trang√®res r√©activ√©es');

    // Compter les enregistrements apr√®s suppression
    console.log('\nüìä Comptage des enregistrements apr√®s suppression...\n');
    for (const table of tablesToClean) {
      try {
        const [countResult] = await executeQuery(`SELECT COUNT(*) as count FROM ${table}`);
        const count = countResult.count;
        console.log(`   ${table}: ${count} enregistrements`);
      } catch (error) {
        console.log(`   ${table}: Table non trouv√©e ou erreur`);
      }
    }

    // V√©rifier les utilisateurs restants
    console.log('\nüë• Utilisateurs restants:\n');
    try {
      const users = await executeQuery('SELECT id, username, email, role FROM users');
      users.forEach(user => {
        console.log(`   - ${user.username} (${user.email}) - ${user.role}`);
      });
    } catch (error) {
      console.log(`‚ö†Ô∏è  Erreur: ${error.message}`);
    }

    console.log('\n‚úÖ Nettoyage de la base de donn√©es termin√© avec succ√®s!');
    console.log('\nüìù Note: Les utilisateurs admin et la structure de la base de donn√©es ont √©t√© pr√©serv√©s.');

  } catch (error) {
    console.error('\n‚ùå Erreur lors du nettoyage:', error.message);
    console.error(error);
    
    // R√©activer les contraintes en cas d'erreur
    try {
      await executeQuery('SET FOREIGN_KEY_CHECKS = 1');
    } catch (e) {
      console.error('Impossible de r√©activer les contraintes:', e.message);
    }
    
    process.exit(1);
  }
}

// Ex√©cuter le nettoyage
if (require.main === module) {
  cleanDatabase()
    .then(() => {
      console.log('\nüëã Au revoir!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Erreur fatale:', error);
      process.exit(1);
    });
}

module.exports = { cleanDatabase };

