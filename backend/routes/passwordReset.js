const express = require('express');
const bcrypt = require('bcryptjs');
const EmailService = require('../services/emailService.js');
const { executeQuery } = require('../config/database.js');

const router = express.Router();
const emailService = new EmailService();

// Fonction pour envoyer l'email de r√©initialisation
async function sendPasswordResetEmail(email, code) {
    try {
        const subject = 'üîë Code de r√©initialisation PigeonFarm';
        const text = `
Bonjour,

Vous avez demand√© la r√©initialisation de votre mot de passe pour votre compte PigeonFarm.

Votre code de r√©initialisation est : ${code}

‚ö†Ô∏è Important :
- Ce code expire dans 15 minutes
- Ne partagez jamais ce code avec personne
- Si vous n'avez pas demand√© cette r√©initialisation, ignorez cet email

Instructions :
1. Copiez le code ci-dessus
2. Retournez sur la page de r√©initialisation
3. Entrez le code dans le champ appropri√©
4. Cr√©ez votre nouveau mot de passe

Si vous avez des questions ou besoin d'aide, contactez notre √©quipe de support.

Cordialement,
L'√©quipe PigeonFarm

---
Cet email a √©t√© envoy√© automatiquement suite √† votre demande de r√©initialisation.
Si vous n'avez pas demand√© cette r√©initialisation, vous pouvez ignorer cet email.
        `;

        const html = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>R√©initialisation de mot de passe - PigeonFarm</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
        .content { padding: 30px; background-color: #f8f9fa; }
        .footer { padding: 20px; text-align: center; font-size: 12px; color: #666; background-color: #e9ecef; border-radius: 0 0 10px 10px; }
        .code { display: inline-block; padding: 15px 30px; background-color: #f8f9fa; border: 2px solid #667eea; border-radius: 8px; font-size: 24px; font-weight: bold; color: #667eea; margin: 20px 0; }
        .warning { background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 8px; margin: 20px 0; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîë R√©initialisation de mot de passe</h1>
            <p>Code de s√©curit√©</p>
        </div>
        <div class="content">
            <h2>Bonjour,</h2>
            <p>Vous avez demand√© la r√©initialisation de votre mot de passe pour votre compte PigeonFarm.</p>
            
            <p><strong>Votre code de r√©initialisation est :</strong></p>
            <div style="text-align: center;">
                <div class="code">${code}</div>
            </div>

            <div class="warning">
                <h4>‚ö†Ô∏è Important :</h4>
                <ul>
                    <li>Ce code expire dans <strong>15 minutes</strong></li>
                    <li>Ne partagez jamais ce code avec personne</li>
                    <li>Si vous n'avez pas demand√© cette r√©initialisation, ignorez cet email</li>
                </ul>
            </div>

            <h3>üìã Instructions :</h3>
            <ol>
                <li>Copiez le code ci-dessus</li>
                <li>Retournez sur la page de r√©initialisation</li>
                <li>Entrez le code dans le champ appropri√©</li>
                <li>Cr√©ez votre nouveau mot de passe</li>
            </ol>
            
            <p>Si vous avez des questions ou besoin d'aide, contactez notre √©quipe de support.</p>
            
            <p>Cordialement,<br><strong>L'√©quipe PigeonFarm</strong></p>
        </div>
        <div class="footer">
            <p>Cet email a √©t√© envoy√© automatiquement suite √† votre demande de r√©initialisation.</p>
            <p>Si vous n'avez pas demand√© cette r√©initialisation, vous pouvez ignorer cet email.</p>
        </div>
    </div>
</body>
</html>
        `;

        await emailService.sendEmail(email, subject, text, html);
        console.log(`üìß Email de r√©initialisation envoy√© √† ${email}`);
        return true;
    } catch (error) {
        console.error('Erreur lors de l\'envoi de l\'email de r√©initialisation:', error);
        return false;
    }
}

// Fonction pour envoyer l'email de confirmation
async function sendPasswordResetConfirmation(email) {
    try {
        const subject = '‚úÖ Mot de passe r√©initialis√© - PigeonFarm';
        const text = `
Bonjour,

Nous vous confirmons que votre mot de passe PigeonFarm a √©t√© r√©initialis√© avec succ√®s.

‚úÖ R√©initialisation confirm√©e
Votre nouveau mot de passe est maintenant actif et vous pouvez vous connecter √† votre compte.

üîí D√©tails de s√©curit√© :
- Email : ${email}
- Date : ${new Date().toLocaleDateString('fr-FR')}
- Heure : ${new Date().toLocaleTimeString('fr-FR')}
- Statut : Mot de passe r√©initialis√©

üõ°Ô∏è Conseils de s√©curit√© :
- Utilisez un mot de passe fort et unique
- Ne partagez jamais vos identifiants
- D√©connectez-vous apr√®s chaque session
- Signalez toute activit√© suspecte

Se connecter maintenant : ${process.env.FRONTEND_URL || 'http://localhost:5173'}/login

Si vous n'avez pas effectu√© cette r√©initialisation, contactez imm√©diatement notre √©quipe de support.

Cordialement,
L'√©quipe PigeonFarm

---
Cet email a √©t√© envoy√© automatiquement suite √† la r√©initialisation de votre mot de passe.
Si vous n'avez pas effectu√© cette r√©initialisation, contactez imm√©diatement notre support.
        `;

        const html = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Mot de passe r√©initialis√© - PigeonFarm</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background: linear-gradient(135deg, #28a745 0%, #20c997 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
        .content { padding: 30px; background-color: #f8f9fa; }
        .footer { padding: 20px; text-align: center; font-size: 12px; color: #666; background-color: #e9ecef; border-radius: 0 0 10px 10px; }
        .success { background-color: #d4edda; border: 1px solid #c3e6cb; padding: 15px; border-radius: 8px; margin: 20px 0; }
        .button { display: inline-block; padding: 15px 30px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; text-decoration: none; border-radius: 25px; margin: 20px 0; font-weight: bold; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚úÖ Mot de passe r√©initialis√©</h1>
            <p>Confirmation de s√©curit√©</p>
        </div>
        <div class="content">
            <h2>Bonjour,</h2>
            <p>Nous vous confirmons que votre mot de passe PigeonFarm a √©t√© r√©initialis√© avec succ√®s.</p>
            
            <div class="success">
                <h4>‚úÖ R√©initialisation confirm√©e</h4>
                <p>Votre nouveau mot de passe est maintenant actif et vous pouvez vous connecter √† votre compte.</p>
            </div>

            <h3>üîí D√©tails de s√©curit√© :</h3>
            <ul>
                <li><strong>Email :</strong> ${email}</li>
                <li><strong>Date :</strong> ${new Date().toLocaleDateString('fr-FR')}</li>
                <li><strong>Heure :</strong> ${new Date().toLocaleTimeString('fr-FR')}</li>
                <li><strong>Statut :</strong> Mot de passe r√©initialis√©</li>
            </ul>

            <h3>üõ°Ô∏è Conseils de s√©curit√© :</h3>
            <ul>
                <li>Utilisez un mot de passe fort et unique</li>
                <li>Ne partagez jamais vos identifiants</li>
                <li>D√©connectez-vous apr√®s chaque session</li>
                <li>Signalez toute activit√© suspecte</li>
            </ul>
            
            <div style="text-align: center; margin: 30px 0;">
                <a href="${process.env.FRONTEND_URL || 'http://localhost:5173'}/login" class="button">Se connecter maintenant</a>
            </div>

            <p>Si vous n'avez pas effectu√© cette r√©initialisation, contactez imm√©diatement notre √©quipe de support.</p>
            
            <p>Cordialement,<br><strong>L'√©quipe PigeonFarm</strong></p>
        </div>
        <div class="footer">
            <p>Cet email a √©t√© envoy√© automatiquement suite √† la r√©initialisation de votre mot de passe.</p>
            <p>Si vous n'avez pas effectu√© cette r√©initialisation, contactez imm√©diatement notre support.</p>
        </div>
    </div>
</body>
</html>
        `;

        await emailService.sendEmail(email, subject, text, html);
        console.log(`üìß Email de confirmation de r√©initialisation envoy√© √† ${email}`);
        return true;
    } catch (error) {
        console.error('Erreur lors de l\'envoi de l\'email de confirmation:', error);
        return false;
    }
}

/**
 * POST /api/forgot-password
 * Demande de r√©initialisation de mot de passe
 * V√©rifie d'abord si l'email existe dans la base de donn√©es
 */
router.post('/forgot-password', async (req, res) => {
    try {
        const { email } = req.body;

        // Validation de l'email
        if (!email || !email.includes('@')) {
            return res.status(400).json({
                success: false,
                message: 'Email invalide'
            });
        }

        console.log('üîç V√©rification de l\'email:', email);

        // 1. V√©rifier si l'email existe dans la base de donn√©es
        const users = await executeQuery(
            'SELECT id, email, username FROM users WHERE email = ?',
            [email]
        );

        if (users.length === 0) {
            console.log('‚ùå Email non trouv√© dans la base de donn√©es:', email);
            return res.status(404).json({
                success: false,
                message: 'Aucun compte associ√© √† cet email'
            });
        }

        const user = users[0];
        console.log('‚úÖ Email trouv√© pour l\'utilisateur:', user.username);

        // 2. Supprimer les anciens codes de r√©initialisation pour cet email
        await executeQuery(
            'DELETE FROM password_reset_codes WHERE email = ?',
            [email]
        );

        // 3. G√©n√©rer un nouveau code √† 4 chiffres
        const code = Math.floor(1000 + Math.random() * 9000).toString();
        const expiresAt = new Date(Date.now() + 15 * 60 * 1000); // 15 minutes

        console.log('üî¢ Code g√©n√©r√©:', code, 'pour l\'email:', email);

        // 4. Sauvegarder le code dans la base de donn√©es
        await executeQuery(
            'INSERT INTO password_reset_codes (email, code, expires_at) VALUES (?, ?, ?)',
            [email, code, expiresAt]
        );

        // 5. Envoyer l'email avec le code
        const emailSent = await sendPasswordResetEmail(email, code);

        if (!emailSent) {
            // Si l'email n'a pas pu √™tre envoy√©, supprimer le code
            await executeQuery(
                'DELETE FROM password_reset_codes WHERE email = ? AND code = ?',
                [email, code]
            );
            
            return res.status(500).json({
                success: false,
                message: 'Erreur lors de l\'envoi de l\'email. Veuillez r√©essayer.'
            });
        }

        console.log('‚úÖ Code de r√©initialisation envoy√© avec succ√®s √†:', email);

        res.json({
            success: true,
            message: 'Code de r√©initialisation envoy√© √† votre email',
            email: email // Retourner l'email pour confirmation
        });

    } catch (error) {
        console.error('‚ùå Erreur lors de la demande de r√©initialisation:', error);
        res.status(500).json({
            success: false,
            message: 'Erreur interne du serveur'
        });
    }
});

/**
 * POST /api/verify-reset-code
 * V√©rification du code de r√©initialisation
 */
router.post('/verify-reset-code', async (req, res) => {
    try {
        const { email, code } = req.body;

        // Validation des param√®tres
        if (!email || !code || code.length !== 4) {
            return res.status(400).json({
                success: false,
                message: 'Email et code √† 4 chiffres requis'
            });
        }

        console.log('üîç V√©rification du code:', code, 'pour l\'email:', email);

        // V√©rifier le code dans la base de donn√©es
        const codes = await executeQuery(
            'SELECT * FROM password_reset_codes WHERE email = ? AND code = ? AND expires_at > NOW() AND used = FALSE',
            [email, code]
        );

        if (codes.length === 0) {
            console.log('‚ùå Code invalide ou expir√© pour l\'email:', email);
            return res.status(400).json({
                success: false,
                message: 'Code invalide ou expir√©. Veuillez demander un nouveau code.'
            });
        }

        const resetCode = codes[0];
        console.log('‚úÖ Code v√©rifi√© avec succ√®s pour l\'email:', email);

        // Marquer le code comme utilis√©
        await executeQuery(
            'UPDATE password_reset_codes SET used = TRUE WHERE id = ?',
            [resetCode.id]
        );

        res.json({
            success: true,
            message: 'Code v√©rifi√© avec succ√®s',
            email: email
        });

    } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification du code:', error);
        res.status(500).json({
            success: false,
            message: 'Erreur interne du serveur'
        });
    }
});

/**
 * POST /api/reset-password
 * R√©initialisation du mot de passe
 */
router.post('/reset-password', async (req, res) => {
    try {
        const { email, code, newPassword } = req.body;

        // Validation des param√®tres
        if (!email || !code || !newPassword) {
            return res.status(400).json({
                success: false,
                message: 'Tous les champs sont requis'
            });
        }

        if (newPassword.length < 6) {
            return res.status(400).json({
                success: false,
                message: 'Le mot de passe doit contenir au moins 6 caract√®res'
            });
        }

        console.log('üîë R√©initialisation du mot de passe pour l\'email:', email);

        // 1. V√©rifier que le code est valide et a √©t√© v√©rifi√© (used = TRUE)
        const codes = await executeQuery(
            'SELECT * FROM password_reset_codes WHERE email = ? AND code = ? AND used = TRUE',
            [email, code]
        );

        if (codes.length === 0) {
            console.log('‚ùå Code invalide ou non v√©rifi√© pour l\'email:', email);
            return res.status(400).json({
                success: false,
                message: 'Code invalide ou non v√©rifi√©. Veuillez d\'abord v√©rifier le code.'
            });
        }

        // 2. Hasher le nouveau mot de passe
        const hashedPassword = await bcrypt.hash(newPassword, 12);

        // 3. Mettre √† jour le mot de passe de l'utilisateur
        const result = await executeQuery(
            'UPDATE users SET password = ? WHERE email = ?',
            [hashedPassword, email]
        );

        if (result.affectedRows === 0) {
            console.log('‚ùå Utilisateur non trouv√© pour l\'email:', email);
            return res.status(404).json({
                success: false,
                message: 'Utilisateur non trouv√©'
            });
        }

        // 4. Supprimer tous les codes de r√©initialisation pour cet email
        await executeQuery(
            'DELETE FROM password_reset_codes WHERE email = ?',
            [email]
        );

        // 5. Envoyer un email de confirmation
        await sendPasswordResetConfirmation(email);

        console.log('‚úÖ Mot de passe r√©initialis√© avec succ√®s pour l\'email:', email);

        res.json({
            success: true,
            message: 'Mot de passe r√©initialis√© avec succ√®s'
        });

    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©initialisation du mot de passe:', error);
        res.status(500).json({
            success: false,
            message: 'Erreur interne du serveur'
        });
    }
});

/**
 * GET /api/password-reset-status
 * V√©rifier le statut d'une demande de r√©initialisation
 */
router.get('/password-reset-status/:email', async (req, res) => {
    try {
        const { email } = req.params;

        // V√©rifier s'il y a des codes actifs pour cet email
        const codes = await executeQuery(
            'SELECT * FROM password_reset_codes WHERE email = ? AND expires_at > NOW() AND used = FALSE',
            [email]
        );

        res.json({
            success: true,
            hasActiveCode: codes.length > 0,
            expiresAt: codes.length > 0 ? codes[0].expires_at : null
        });

    } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification du statut:', error);
        res.status(500).json({
            success: false,
            message: 'Erreur interne du serveur'
        });
    }
});

module.exports = router; 