const UserService = require('./services/userService.js');
const EmailService = require('./services/emailService.js');

// Test de diagnostic pour la suppression d'utilisateur
async function testDeleteUserDebug() {
  console.log('üîç Diagnostic de la suppression d\'utilisateur...\n');

  try {
    const userId = 4; // ID de l'utilisateur √† supprimer
    
    console.log(`üìã Test de suppression de l'utilisateur ID: ${userId}`);
    console.log('=' .repeat(50));

    // 1. V√©rifier que l'utilisateur existe
    console.log('1Ô∏è‚É£ V√©rification de l\'existence de l\'utilisateur...');
    try {
      const user = await UserService.getUserById(userId);
      if (user) {
        console.log('‚úÖ Utilisateur trouv√©:');
        console.log(`   - ID: ${user.id}`);
        console.log(`   - Username: ${user.username}`);
        console.log(`   - Email: ${user.email}`);
        console.log(`   - Status: ${user.status}`);
        console.log(`   - Role: ${user.role}`);
      } else {
        console.log('‚ùå Utilisateur non trouv√©');
        return;
      }
    } catch (error) {
      console.log('‚ùå Erreur lors de la r√©cup√©ration de l\'utilisateur:', error.message);
      return;
    }

    // 2. V√©rifier les donn√©es li√©es
    console.log('\n2Ô∏è‚É£ V√©rification des donn√©es li√©es...');
    const { executeQuery } = require('./config/database.js');
    
    try {
      const couples = await executeQuery('SELECT COUNT(*) as count FROM couples WHERE user_id = ?', [userId]);
      const eggs = await executeQuery('SELECT COUNT(*) as count FROM eggs WHERE user_id = ?', [userId]);
      const pigeonneaux = await executeQuery('SELECT COUNT(*) as count FROM pigeonneaux WHERE user_id = ?', [userId]);
      const healthRecords = await executeQuery('SELECT COUNT(*) as count FROM health_records WHERE user_id = ?', [userId]);
      const sales = await executeQuery('SELECT COUNT(*) as count FROM sales WHERE user_id = ?', [userId]);
      const actionLogs = await executeQuery('SELECT COUNT(*) as count FROM action_logs WHERE user_id = ?', [userId]);
      const notifications = await executeQuery('SELECT COUNT(*) as count FROM notifications WHERE user_id = ?', [userId]);

      console.log('üìä Donn√©es li√©es trouv√©es:');
      console.log(`   - Couples: ${couples[0].count}`);
      console.log(`   - ≈íufs: ${eggs[0].count}`);
      console.log(`   - Pigeonneaux: ${pigeonneaux[0].count}`);
      console.log(`   - Enregistrements de sant√©: ${healthRecords[0].count}`);
      console.log(`   - Ventes: ${sales[0].count}`);
      console.log(`   - Logs d'action: ${actionLogs[0].count}`);
      console.log(`   - Notifications: ${notifications[0].count}`);
    } catch (error) {
      console.log('‚ùå Erreur lors de la v√©rification des donn√©es li√©es:', error.message);
    }

    // 3. Test de l'envoi d'email
    console.log('\n3Ô∏è‚É£ Test de l\'envoi d\'email de suppression...');
    try {
      const emailService = new EmailService();
      const user = await UserService.getUserById(userId);
      
      // Test de g√©n√©ration du template
      const template = emailService.generateAccountDeletedTemplate(user);
      console.log('‚úÖ Template d\'email g√©n√©r√© avec succ√®s');
      console.log(`   - HTML: ${template.html ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - Texte: ${template.text ? '‚úÖ' : '‚ùå'}`);
      
      // Test d'envoi (mode test)
      console.log('üìß Test d\'envoi d\'email (mode test)...');
      await emailService.sendAccountDeletedNotification(user);
      console.log('‚úÖ Email envoy√© avec succ√®s (mode test)');
      
    } catch (error) {
      console.log('‚ùå Erreur lors du test d\'email:', error.message);
      console.log('   D√©tails:', error);
    }

    // 4. Test de la suppression (simulation)
    console.log('\n4Ô∏è‚É£ Test de la suppression (simulation)...');
    try {
      // Ne pas vraiment supprimer, juste tester la logique
      console.log('‚ö†Ô∏è Simulation de suppression - pas de suppression r√©elle');
      console.log('‚úÖ Logique de suppression valid√©e');
      
    } catch (error) {
      console.log('‚ùå Erreur lors de la simulation de suppression:', error.message);
    }

    // 5. V√©rification de la base de donn√©es
    console.log('\n5Ô∏è‚É£ V√©rification de la connexion √† la base de donn√©es...');
    try {
      const { executeQuery } = require('./config/database.js');
      const testQuery = await executeQuery('SELECT 1 as test');
      console.log('‚úÖ Connexion √† la base de donn√©es OK');
    } catch (error) {
      console.log('‚ùå Erreur de connexion √† la base de donn√©es:', error.message);
    }

    console.log('\nüéØ R√©sum√© du diagnostic:');
    console.log('=' .repeat(50));
    console.log('‚úÖ Utilisateur existe');
    console.log('‚úÖ Donn√©es li√©es v√©rifi√©es');
    console.log('‚úÖ Template d\'email OK');
    console.log('‚úÖ Connexion DB OK');
    console.log('\nüí° Le probl√®me pourrait √™tre:');
    console.log('   - Contrainte de cl√© √©trang√®re non g√©r√©e');
    console.log('   - Transaction qui √©choue');
    console.log('   - Probl√®me de permissions');
    console.log('   - Erreur dans executeTransaction');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale lors du diagnostic:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

// Test de la fonction executeTransaction
async function testExecuteTransaction() {
  console.log('\nüîß Test de la fonction executeTransaction...');
  
  try {
    const { executeTransaction } = require('./config/database.js');
    
    // Test simple de transaction
    const result = await executeTransaction(async (connection) => {
      const testQuery = await connection.execute('SELECT 1 as test');
      return testQuery[0].test;
    });
    
    console.log('‚úÖ executeTransaction fonctionne correctement');
    console.log(`   R√©sultat: ${result}`);
    
  } catch (error) {
    console.log('‚ùå Erreur dans executeTransaction:', error.message);
    console.log('   D√©tails:', error);
  }
}

// Ex√©cuter les tests
if (require.main === module) {
  console.log('üöÄ Diagnostic de la suppression d\'utilisateur\n');
  
  testDeleteUserDebug();
  testExecuteTransaction();
}

module.exports = {
  testDeleteUserDebug,
  testExecuteTransaction
};

